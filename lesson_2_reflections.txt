What happens when you initialize a repository? Why do you need to do it?

It creates a hidden directory called '.git' which will contain the config for the git project, which allows you to start committing changes.


How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area acts as a middle-ground between the working directory and the repository. Files that are changed are added to the staging area, before being commited to the repository. 
The value it offers is that it makes adding small incremental changes easier. These changes can be bundled up in one staging area, before being all committed to the repository.


How can you use the staging area to make sure you have one commit per logical change?

By adding all changes towards a logical change to the staging area, you can then commit when the change has been completed. This allows the little changes to be saved before the final commit is made.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branching would be useful in keeping track of experimental changes. This allows them to be made away from the master branch and allows the changes to be merged back in when necessary.


How do the diagrams help you visualize the branch structure?

They allow me see how the branches connect. They also help me see the parents for each commit. 


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result of merging two branches together is to consolidate the changes from the two branches together. The new branch will then have two parent commits. This is represented on the graph as showing two arrows coming away from the merge.


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Automatic merging:
Pros:
-Saves time
-Removes some of the complexity
Cons: 
-May miss conflicts that are not on the same lines. Behaviour which conflicts in the code.
-Requires time to sort out merge conflicts.

Manually:
Pros:
Forces coders to discuss changes, lessening chances of behavioural conflicts.
Cons:
-Takes more time
-There may be no convienient time for the two coders to get together to discuss the changes.


